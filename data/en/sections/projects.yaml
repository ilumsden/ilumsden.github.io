section:
  name: Projects
  id: projects
  enable: true
  weight: 5
  showOnNavbar: true

buttons:
  - name: "All"
    filter: "all"
  - name: GCLab
    filter: "gclab"
  - name: "LLNL"
    filter: "llnl"
  - name: "ORNL"
    filter: "ornl"

projects:
  - name: DYnamic and Asynchronous Data Streamliner (DYAD)
    logo: /images/sections/skills/flux_logo.png
    role: Developer and Researcher
    timeline: "May 2022 - Present"
    repo: https://github.com/flux-framework/DYAD
    summary: >
      DYAD (part of the Flux project) is a tool that enables computational science workflows that are
      using sequential, PFS-based data movement to transition to more state-of-the-art
      in situ and in transit data movement. It enables this using the tooling provided
      by LLNL's Flux resource manager.

      My work on DYAD includes examining its performance impact on workflows and improving
      DYAD's data movement using networking libraries like UCX.
    tags: ["gclab", "llnl"]
  - name: Thicket 
    logo: /images/sections/projects/thicket_logo.png
    role: Developer and Researcher
    timeline: "May 2022 - Present"
    repo: https://github.com/LLNL/thicket
    summary: >
      Thicket is a Python-based toolkit for analyzing ensemble performance data. It is also built on
      top of Hatchet, allowing for the same benefits that Hatchet provides.

      My work on Thicket centers around the Call Path Query Language I created for Hatchet as well
      as general software engineering work.
    tags: ["gclab", "llnl"]
  - name: Hatchet
    logo: /images/sections/projects/hatchet_logo.png
    role: Developer and Researcher
    timeline: "May 2020 - Present"
    repo: https://github.com/LLNL/hatchet
    summary: >
      Hatchet is a Python library that enables users to analyze performance data generated by
      different HPC profilers. Its main advantage over other tools is that it is capable of
      ingesting data from different profilers into a common representation, allowing users to
      use the same code to analyze performance data from different sources.

      My work on Hatchet centers around the Call Path Query Language, which enables users to filter
      profiles based on caller-callee relationships.
    tags: ["gclab", "llnl"]
  - name: McVineGPU
    # logo:
    role: Developer
    timeline: "May 2018 - December 2018"
    repo: https://github.com/mcvine/McVineGPU
    summary: >
      McVineGPU is a proof-of-concept implementation of a GPU-powered version of MCViNE (a ray-tracing
      neutron scattering experiment simulation software).
    tags: ["ornl"]
  - name: SCADGen
    # logo:
    role: Developer
    timeline: "January 2018 - May 2018"
    repo: https://github.com/mcvine/SCADGen
    summary: >
      SCADGen is a tool for converting XMLs used by MCViNE to represent constructive solid
      geometry into OpenSCAD code for visualization and STL generation purposes.
    tags: ["ornl"]
  - name: ipywe
    logo: /images/sections/projects/ipywe_logo.png
    role: Developer
    timeline: "May 2017 - August 2017"
    repo: https://github.com/scikit-beam/ipywe
    summary: >
      ipywe is a library that provides a set of widgets/GUIs for performing neutron scattering data
      analysis within Jupyter notebooks.
    tags: ["ornl"]
